generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PaymentMethod {
  card
  crypto
}

model User {
  id Int @id @unique @default(autoincrement())

  name     String
  email    String  @unique
  
  isEmailVerified Boolean @default(false)

  emailVerificationToken String @default(uuid())
  lastEmailSentAt        DateTime?

  password String

  profilePicture String?

  paymentMethod PaymentMethod?

  isPlus           Boolean @default(false)
  plusExpiresAt    DateTime?

  credits        Int     @default(10)
  premiumCredits Int     @default(0)

  systemPrompt    String  @default("")
  shareInfoWithAI Boolean @default(true)

  firstUsageAt DateTime?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chats Chat[]
  messages Message[]

  @@map("users")
}

model Chat {
  id String @id @unique @default(uuid())

  title String

  model String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages Message[]

  @@map("chats")
}

enum MessageRole {
  user
  assistant
  system
}

model Message {
  id Int @id @unique @default(autoincrement())

  role MessageRole

  model String

  content String
  parts MessagePart[]

  files File[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum MessagePartType {
  text
  reasoning
  source
}

model MessagePart {
  id Int @id @unique @default(autoincrement())

  type MessagePartType

  text String

  messageId Int
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_parts")
}

model File {
  id Int @id @unique @default(autoincrement())

  name String
  url  String

  contentType String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  messageId Int
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("files")
}
