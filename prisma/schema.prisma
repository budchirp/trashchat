generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id Int @id @unique @default(autoincrement())

  email    String  @unique
  profile Profile?

  isEmailVerified Boolean @default(false) @map("is_email_verified")

  emailVerificationToken String @default(uuid()) @map("email_verification_token")
  lastEmailSentAt        DateTime? @map("last_email_sent_at")

  password String
  passwordResets PasswordReset[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @default(now()) @map("updated_at")

  customization AICustomization?

  usages Usages?

  subscription Subscription?

  sessions Session[]

  chats Chat[]
  messages Message[]

  @@map("users")
}

model PasswordReset {
  id String @id @unique @default(uuid())

  expiresAt DateTime @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @default(now()) @map("updated_at")

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Usages {
  id Int @id @unique @default(autoincrement())

  credits        Int     @default(10) @map("credits")
  premiumCredits Int     @default(0) @map("premium_credits")

  userId Int @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("usages")
}

model AICustomization {
  id Int @id @unique @default(autoincrement())

  defaultModel String @map("default_model")

  systemPrompt    String  @default("") @map("system_prompt")
  shareInfoWithAI Boolean @default(true) @map("share_info_with_ai")

  userId Int @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_customizations")
}

model Profile {
  id Int @id @unique @default(autoincrement())

  name     String

  profilePicture String? @map("profile_picture")

  userId Int @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

enum SessionPlatform {
  mobile
  desktop
  tablet
}

model Session {
  id String @id @unique @default(uuid())

  ip String

  platform SessionPlatform

  os String
  browser String

  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum PaymentMethod {
  card
  crypto
}

model Subscription {
  id Int @id @unique @default(autoincrement())

  paymentMethod PaymentMethod @map("payment_method")

  expiresAt DateTime @map("expires_at")

  userId Int @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Chat {
  id String @id @unique @default(uuid())

  title String

  model String

  isPublic Boolean @default(false) @map("is_public")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages Message[]

  @@map("chats")
}

enum MessageRole {
  user
  assistant
  system
}

model Message {
  id Int @id @unique @default(autoincrement())

  role MessageRole

  model String

  content String
  parts MessagePart[]

  files File[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum MessagePartType {
  text
  reasoning
  source
}

model MessagePart {
  id Int @id @unique @default(autoincrement())

  type MessagePartType

  text String

  messageId Int
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_parts")
}

model File {
  id Int @id @unique @default(autoincrement())

  name String
  url  String

  contentType String @map("content_type")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  messageId Int
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("files")
}
